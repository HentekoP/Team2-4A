<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="_auto_cam_8cs" kind="file">
    <compoundname>AutoCam.cs</compoundname>
    <innerclass refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam" prot="public">UnityStandardAssets::Cameras::AutoCam</innerclass>
    <innernamespace refid="namespace_unity_standard_assets_1_1_cameras">UnityStandardAssets::Cameras</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>UnityEngine;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>UNITY_EDITOR</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">UnityStandardAssets.Cameras</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>[ExecuteInEditMode]</highlight></codeline>
<codeline lineno="10" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam" kindref="compound">AutoCam</ref><sp/>:<sp/><ref refid="class_unity_standard_assets_1_1_cameras_1_1_pivot_based_camera_rig" kindref="compound">PivotBasedCameraRig</ref></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1afc83a5da070c04c277d03570f3720c7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[SerializeField]<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_MoveSpeed<sp/>=<sp/>3;<sp/></highlight><highlight class="comment">//<sp/>How<sp/>fast<sp/>the<sp/>rig<sp/>will<sp/>move<sp/>to<sp/>keep<sp/>up<sp/>with<sp/>target&apos;s<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1a8cf3fbfdd0f435b9e031a6dce2752373" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[SerializeField]<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_TurnSpeed<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>How<sp/>fast<sp/>the<sp/>rig<sp/>will<sp/>turn<sp/>to<sp/>keep<sp/>up<sp/>with<sp/>target&apos;s<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1a1d888b6f9131e4961e1632ddbb02da2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[SerializeField]<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_RollSpeed<sp/>=<sp/>0.2f;</highlight><highlight class="comment">//<sp/>How<sp/>fast<sp/>the<sp/>rig<sp/>will<sp/>roll<sp/>(around<sp/>Z<sp/>axis)<sp/>to<sp/>match<sp/>target&apos;s<sp/>roll.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1a3ac9ffbf5eb25b573cb190570b05b236" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[SerializeField]<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_FollowVelocity<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//<sp/>Whether<sp/>the<sp/>rig<sp/>will<sp/>rotate<sp/>in<sp/>the<sp/>direction<sp/>of<sp/>the<sp/>target&apos;s<sp/>velocity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1a3051940740b4c51fe5a5afada75faff5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[SerializeField]<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_FollowTilt<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Whether<sp/>the<sp/>rig<sp/>will<sp/>tilt<sp/>(around<sp/>X<sp/>axis)<sp/>with<sp/>the<sp/>target.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1a079632de1fa73c20eea7bcc3ffc6c873" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[SerializeField]<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_SpinTurnLimit<sp/>=<sp/>90;</highlight><highlight class="comment">//<sp/>The<sp/>threshold<sp/>beyond<sp/>which<sp/>the<sp/>camera<sp/>stops<sp/>following<sp/>the<sp/>target&apos;s<sp/>rotation.<sp/>(used<sp/>in<sp/>situations<sp/>where<sp/>a<sp/>car<sp/>spins<sp/>out,<sp/>for<sp/>example)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1ab9f6805f937271aeca2e7a13201524c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[SerializeField]<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_TargetVelocityLowerLimit<sp/>=<sp/>4f;</highlight><highlight class="comment">//<sp/>the<sp/>minimum<sp/>velocity<sp/>above<sp/>which<sp/>the<sp/>camera<sp/>turns<sp/>towards<sp/>the<sp/>object&apos;s<sp/>velocity.<sp/>Below<sp/>this<sp/>we<sp/>use<sp/>the<sp/>object&apos;s<sp/>forward<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1a5bb790f35f64b1053e284d0befd1e044" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[SerializeField]<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_SmoothTurnTime<sp/>=<sp/>0.2f;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>smoothing<sp/>for<sp/>the<sp/>camera&apos;s<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1a61e555e94cb71147339a03a2fb1912ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1a61e555e94cb71147339a03a2fb1912ee" kindref="member">m_LastFlatAngle</ref>;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>relative<sp/>angle<sp/>of<sp/>the<sp/>target<sp/>and<sp/>the<sp/>rig<sp/>from<sp/>the<sp/>previous<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1a584190712218c200799b8f4a600d6326" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1a584190712218c200799b8f4a600d6326" kindref="member">m_CurrentTurnAmount</ref>;<sp/></highlight><highlight class="comment">//<sp/>How<sp/>much<sp/>to<sp/>turn<sp/>the<sp/>camera</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1a64fa757b57700810503751af3f033fc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1a64fa757b57700810503751af3f033fc6" kindref="member">m_TurnSpeedVelocityChange</ref>;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>change<sp/>in<sp/>the<sp/>turn<sp/>speed<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1aac06399f201ae1b4e61f8315b80702ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Vector3<sp/>m_RollUp<sp/>=<sp/>Vector3.up;</highlight><highlight class="comment">//<sp/>The<sp/>roll<sp/>of<sp/>the<sp/>camera<sp/>around<sp/>the<sp/>z<sp/>axis<sp/>(<sp/>generally<sp/>this<sp/>will<sp/>always<sp/>just<sp/>be<sp/>up<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1aaeccf7be91a8717e4e362d1791914b35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_unity_standard_assets_1_1_cameras_1_1_auto_cam_1aaeccf7be91a8717e4e362d1791914b35" kindref="member">FollowTarget</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>target,<sp/>or<sp/>no<sp/>time<sp/>passed<sp/>then<sp/>we<sp/>quit<sp/>early,<sp/>as<sp/>there<sp/>is<sp/>nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(deltaTime<sp/>&gt;<sp/>0)<sp/>||<sp/>m_Target<sp/>==<sp/>null)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>some<sp/>vars,<sp/>we&apos;ll<sp/>be<sp/>modifying<sp/>these<sp/>in<sp/>a<sp/>moment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>targetForward<sp/>=<sp/>m_Target.forward;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>targetUp<sp/>=<sp/>m_Target.up;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_FollowVelocity<sp/>&amp;&amp;<sp/>Application.isPlaying)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>follow<sp/>velocity<sp/>mode,<sp/>the<sp/>camera&apos;s<sp/>rotation<sp/>is<sp/>aligned<sp/>towards<sp/>the<sp/>object&apos;s<sp/>velocity<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>only<sp/>if<sp/>the<sp/>object<sp/>is<sp/>traveling<sp/>faster<sp/>than<sp/>a<sp/>given<sp/>threshold.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(targetRigidbody.velocity.magnitude<sp/>&gt;<sp/>m_TargetVelocityLowerLimit)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>velocity<sp/>is<sp/>high<sp/>enough,<sp/>so<sp/>we&apos;ll<sp/>use<sp/>the<sp/>target&apos;s<sp/>velocty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetForward<sp/>=<sp/>targetRigidbody.velocity.normalized;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetUp<sp/>=<sp/>Vector3.up;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetUp<sp/>=<sp/>Vector3.up;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_CurrentTurnAmount<sp/>=<sp/>Mathf.SmoothDamp(m_CurrentTurnAmount,<sp/>1,<sp/>ref<sp/>m_TurnSpeedVelocityChange,<sp/>m_SmoothTurnTime);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>in<sp/>&apos;follow<sp/>rotation&apos;<sp/>mode,<sp/>where<sp/>the<sp/>camera<sp/>rig&apos;s<sp/>rotation<sp/>follows<sp/>the<sp/>object&apos;s<sp/>rotation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>section<sp/>allows<sp/>the<sp/>camera<sp/>to<sp/>stop<sp/>following<sp/>the<sp/>target&apos;s<sp/>rotation<sp/>when<sp/>the<sp/>target<sp/>is<sp/>spinning<sp/>too<sp/>fast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg<sp/>when<sp/>a<sp/>car<sp/>has<sp/>been<sp/>knocked<sp/>into<sp/>a<sp/>spin.<sp/>The<sp/>camera<sp/>will<sp/>resume<sp/>following<sp/>the<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>target<sp/>when<sp/>the<sp/>target&apos;s<sp/>angular<sp/>velocity<sp/>slows<sp/>below<sp/>the<sp/>threshold.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>currentFlatAngle<sp/>=<sp/>Mathf.Atan2(targetForward.x,<sp/>targetForward.z)*Mathf.Rad2Deg;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(m_SpinTurnLimit<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>targetSpinSpeed<sp/>=<sp/>Mathf.Abs(Mathf.DeltaAngle(m_LastFlatAngle,<sp/>currentFlatAngle))/deltaTime;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>desiredTurnAmount<sp/>=<sp/>Mathf.InverseLerp(m_SpinTurnLimit,<sp/>m_SpinTurnLimit*0.75f,<sp/>targetSpinSpeed);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>turnReactSpeed<sp/>=<sp/>(m_CurrentTurnAmount<sp/>&gt;<sp/>desiredTurnAmount<sp/>?<sp/>.1f<sp/>:<sp/>1f);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Application.isPlaying)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_CurrentTurnAmount<sp/>=<sp/>Mathf.SmoothDamp(m_CurrentTurnAmount,<sp/>desiredTurnAmount,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref<sp/>m_TurnSpeedVelocityChange,<sp/>turnReactSpeed);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>editor<sp/>mode,<sp/>smoothdamp<sp/>won&apos;t<sp/>work<sp/>because<sp/>it<sp/>uses<sp/>deltaTime<sp/>internally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_CurrentTurnAmount<sp/>=<sp/>desiredTurnAmount;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_CurrentTurnAmount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_LastFlatAngle<sp/>=<sp/>currentFlatAngle;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>camera<sp/>position<sp/>moves<sp/>towards<sp/>target<sp/>position:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform.position<sp/>=<sp/>Vector3.Lerp(transform.position,<sp/>m_Target.position,<sp/>deltaTime*m_MoveSpeed);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>camera&apos;s<sp/>rotation<sp/>is<sp/>split<sp/>into<sp/>two<sp/>parts,<sp/>which<sp/>can<sp/>have<sp/>independend<sp/>speed<sp/>settings:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotating<sp/>towards<sp/>the<sp/>target&apos;s<sp/>forward<sp/>direction<sp/>(which<sp/>encompasses<sp/>its<sp/>&apos;yaw&apos;<sp/>and<sp/>&apos;pitch&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_FollowTilt)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetForward.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(targetForward.sqrMagnitude<sp/>&lt;<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.Epsilon)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetForward<sp/>=<sp/>transform.forward;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rollRotation<sp/>=<sp/>Quaternion.LookRotation(targetForward,<sp/>m_RollUp);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>aligning<sp/>with<sp/>the<sp/>target<sp/>object&apos;s<sp/>up<sp/>direction<sp/>(i.e.<sp/>its<sp/>&apos;roll&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_RollUp<sp/>=<sp/>m_RollSpeed<sp/>&gt;<sp/>0<sp/>?<sp/>Vector3.Slerp(m_RollUp,<sp/>targetUp,<sp/>m_RollSpeed*deltaTime)<sp/>:<sp/>Vector3.up;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform.rotation<sp/>=<sp/>Quaternion.Lerp(transform.rotation,<sp/>rollRotation,<sp/>m_TurnSpeed*m_CurrentTurnAmount*deltaTime);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Noguc/Downloads/Team2-4A-Yoshi/Team2-4A-Yoshi/Assets/Tools/Standard Assets/Cameras/Scripts/AutoCam.cs"/>
  </compounddef>
</doxygen>
